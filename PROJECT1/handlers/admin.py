from telebot import TeleBot
from keyboards.reply import get_admin_keyboard
import config
import os

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ADMIN_MENU, EDIT_SCHEDULE, ADD_ANNOUNCEMENT, ADD_ADMIN, UPLOAD_PHOTO, UPLOAD_FILE = range(6)
user_states = {}  # {user_id: state}


def handle_admin(bot: TeleBot):
    @bot.message_handler(commands=['admin'])
    def admin_menu(message):
        if message.from_user.id not in config.ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return

        user_states[message.from_user.id] = ADMIN_MENU
        bot.send_message(
            message.chat.id,
            "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
            reply_markup=get_admin_keyboard()
        )

    @bot.message_handler(func=lambda m: m.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    def set_schedule_prompt(message):
        if message.from_user.id not in config.ADMINS:
            return
        user_states[message.from_user.id] = EDIT_SCHEDULE
        bot.send_message(
            message.chat.id,
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: –ü—Ä–µ–¥–º–µ—Ç (–≤—Ä–µ–º—è)\n–í—Ç–æ—Ä–Ω–∏–∫: ...\n...",
            reply_markup=None
        )

    @bot.message_handler(func=lambda m: m.text == "üì¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    def add_announcement_prompt(message):
        if message.from_user.id not in config.ADMINS:
            return
        user_states[message.from_user.id] = ADD_ANNOUNCEMENT
        bot.send_message(
            message.chat.id,
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=None
        )

    @bot.message_handler(func=lambda m: m.text == "‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞")
    def prompt_new_admin(message):
        if message.from_user.id != config.MAIN_ADMIN_ID:
            return
        user_states[message.from_user.id] = ADD_ADMIN
        bot.send_message(
            message.chat.id,
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=None
        )

    @bot.message_handler(func=lambda m: m.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª/—Ñ–æ—Ç–æ")
    def upload_file_prompt(message):
        if message.from_user.id not in config.ADMINS:
            return
        user_states[message.from_user.id] = UPLOAD_PHOTO
        bot.send_message(
            message.chat.id,
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º",
            reply_markup=None
        )

    @bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.from_user.id) == UPLOAD_PHOTO)
    def handle_uploaded_photo(message):
        try:
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(config.SCHEDULE_PHOTO_PATH, 'wb') as new_file:
                new_file.write(downloaded_file)

            user_states[message.from_user.id] = UPLOAD_FILE
            bot.send_message(message.chat.id, "üìÑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º (PDF, Word –∏ —Ç.–ø.)")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, "üì¶ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())

    @bot.message_handler(content_types=['document'], func=lambda m: user_states.get(m.from_user.id) in [UPLOAD_PHOTO, UPLOAD_FILE])
    def handle_uploaded_file(message):
        try:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            file_name = message.document.file_name
            file_path = config.SCHEDULE_FILE_PATH  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ .pdf (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º)

            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –∏ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            bot.send_message(message.chat.id, "üì¶ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=get_admin_keyboard())

    @bot.message_handler(func=lambda m: m.from_user.id in config.ADMINS and m.text not in ["‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "üì¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª/—Ñ–æ—Ç–æ"])
    def process_admin_input(message):
        user_id = message.from_user.id
        state = user_states.get(user_id)

        if state == EDIT_SCHEDULE:
            try:
                new_schedule = {}
                lines = message.text.strip().split('\n')
                for line in lines:
                    if ':' in line:
                        day, lesson = line.split(':', 1)
                        new_schedule[day.strip()] = lesson.strip()
                config.DEFAULT_SCHEDULE = new_schedule
                config.data["schedule"] = new_schedule
                config.save_data(config.data)
                bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            finally:
                bot.send_message(message.chat.id, "üì¶ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:", reply_markup=get_admin_keyboard())

        elif state == ADD_ANNOUNCEMENT:
            announcement_text = message.text.strip()
            config.ANNOUNCEMENTS.append(announcement_text)
            config.data["announcements"] = config.ANNOUNCEMENTS
            config.save_data(config.data)
            bot.send_message(message.chat.id, "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            bot.send_message(message.chat.id, "üì¶ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:", reply_markup=get_admin_keyboard())

        elif state == ADD_ADMIN:
            if user_id != config.MAIN_ADMIN_ID:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
                bot.send_message(message.chat.id, "üì¶ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:", reply_markup=get_admin_keyboard())
                return

            try:
                new_admin_id = int(message.text.strip())
                if new_admin_id not in config.ADMINS:
                    config.ADMINS.append(new_admin_id)
                    config.data["admins"] = config.ADMINS
                    config.save_data(config.data)
                    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
                else:
                    bot.send_message(message.chat.id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
            except ValueError:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            finally:
                bot.send_message(message.chat.id, "üì¶ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:", reply_markup=get_admin_keyboard())

        else:
            bot.send_message(message.chat.id, "üì¶ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_admin_keyboard())