from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from services.ai_service import generate_profession_recommendations, parse_ai_response
from services.db_service import add_profession_to_db
from keyboards.inline import SUBJECTS, get_subjects_keyboard


def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    query.answer()

    if data == 'start_test':
        # –û—á–∏—â–∞–µ–º/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        context.user_data["subjects"] = []
        query.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:")
        query.edit_message_reply_markup(reply_markup=get_subjects_keyboard(context))

    elif data.startswith('subject_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        user_data = context.user_data.setdefault("subjects", [])
        subject_idx = int(data.split('_')[1])
        subject = SUBJECTS[subject_idx]

        if subject in user_data:
            user_data.remove(subject)
        else:
            user_data.append(subject)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = []
        for i, s in enumerate(SUBJECTS):
            if s in user_data:
                buttons.append([InlineKeyboardButton(f"‚úÖ {s}", callback_data=f"subject_{i}")])
            else:
                buttons.append([InlineKeyboardButton(s, callback_data=f"subject_{i}")])
        buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish")])

        try:
            query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(buttons))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    elif data == 'finish':
        selected = context.user_data.get("subjects", [])
        if not selected:
            query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç!")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
        query.edit_message_text("üß† –ü–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º...")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        raw_response = generate_profession_recommendations(selected)

        if raw_response:
            professions_list = parse_ai_response(raw_response)

            if professions_list:
                for prof in professions_list:
                    add_profession_to_db(prof, selected)
                query.edit_message_text(raw_response)
            else:
                query.edit_message_text("üß† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò.")
        else:
            from services.db_service import get_random_profession_from_db
            profession = get_random_profession_from_db()
            if profession:
                education_links = '\n  '.join(profession['education'])
                text = (
                    f"üìö –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò, –Ω–æ –Ω–∞—à–ª–∏ —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:\n\n"
                    f"üíº *{profession['name']}*\n\n"
                    f"{profession['description']}\n\n"
                    f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:\n"
                    f"  - {profession['salary']}\n\n"
                    f"üìö –ì–¥–µ —É—á–∏—Ç—å—Å—è:\n"
                    f"  {education_links}"
                )
                query.edit_message_text(text, parse_mode="Markdown")
            else:
                query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏ –≤ –ë–î –Ω–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def get_subjects_keyboard(context: CallbackContext):
    user_data = context.user_data.setdefault("subjects", [])

    buttons = []
    for i, s in enumerate(SUBJECTS):
        if s in user_data:
            buttons.append([InlineKeyboardButton(f"‚úÖ {s}", callback_data=f"subject_{i}")])
        else:
            buttons.append([InlineKeyboardButton(s, callback_data=f"subject_{i}")])
    buttons.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish")])
    return InlineKeyboardMarkup(buttons)